{% include "devrev-snapin-template.plain" %}

#  The Trello Snap-In

***Definitions:***

- The Snap-In interacts with Trello API (The API).

- The Organization is Trello organization.

- The Data Model of The API is as follows:
    ```
    The Data Model
    ├─ The List of Users
    │  └─ The User
    │     └─ The Permissions
    └─ The List of Boards
       └─ The Board
          └─ The List of Cards
             └─ The Card
                ├─ The List of Checklists
                │  └─ The Checklist
                ├─ The List of Comments
                │  └─ The Comment
                └─ The List of Attachments
                   └─ The Attachment
    ```

- The Fetched Boards are The List of Boards that are fetched from The API.

- The Fetched Users are The List of Users that are fetched from The API.

- The Fetched Cards are The List of Cards that are fetched from The API.

- The Fetched Attachments are The List of Attachments that are fetched from The API. One card from The Fetched Cards can have multiple attachments.

***Non-Functional Requirements:***

- The Trello Internal Client is a TypeScript service that communicates with The API. These are the rules for The Trello Internal Client:
  - If we need to create a new request to The API, we must create a new method in The Trello Internal Client.
  - Communication with The API must be completely abstracted away from The Function. The Function must be able to initialize The Trello Internal Client, call the relevant method from The Trello Internal Client and get the response from The API.

- The API key and token are provided in the "key" field of the "connection_data" dictionary which is part of "payload" dictionary. The "key" field has the following internal format: "key=<api_key>&token=<token>"

***Test Requirements:***

- Credentials should be read from the environment. The following environment variables are required: `TRELLO_API_KEY` (The Trello API Key), `TRELLO_TOKEN` (The Trello OAuth Token), `TRELLO_ORGANIZATION_ID` (The Organization ID).

- "external_sync_unit_id" "688725dad59c015ce052eecf" can be used when board ID is required for testing purposes.

- Card ID "688725fdf26b3c50430cae23" can be used when card ID is required for testing attachments.

## Data Fetching

***Non-Functional Requirements:***

- The resource [trello-openapi-compact.yaml](trello-openapi-compact.yaml) describes The API.

- The Functions being implemented *must not* invoke The Spawn Method nor The Worker Thread.

***Functional Requirements:***

- Implement The Function that provides a check if authentication with The API works. Authentication should be checked by making a request to the endpoint "/members/{id}", and providing "me" as the value of the "id" parameter.

- Implement The Function that uses The API to fetch The List of Boards (The Fetched Boards) using the endpoint "/members/{id}/boards".

  ***Acceptance Tests:***

  - When using The Test Trello Credentials a board with the name "SaaS connectors" must be in the result of The Function.

- Implement The Function that uses The API to fetch The List of Users of The Organization (The Fetched Users) using the endpoint "/organizations/{id}/members". The Organization ID is provided in the "org_id" field of the "connection_data" dictionary which is part of "payload" dictionary.

- Implement The Function called "fetch_board_cards" that uses The API to fetch The Fetched Cards for a given board using the endpoint "/boards/{id}/cards".
  - The Board ID is provided in the "external_sync_unit_id" field of the "event_context" dictionary which is part of "payload" dictionary.
  - The following pagination parameters should be supported:
    - "limit" (required, integer)
    - "before" (optional, string)
  - "limit" and "before" should be provided in the "payload" dictionary.

  ***Acceptance Tests:***

  - Test The Function "fetch_board_cards" with Board ID "688725dad59c015ce052eecf", "limit" of 100, and no "before" parameter. Expect the number of The Fetched Cards to be 100.

  - Test The Function "fetch_board_cards" with Board ID "688725dad59c015ce052eecf", "limit" of 100, and "before" set to "688725fdf26b3c50430cae23". Expect the number of The Fetched Cards to be 50.

- Implement The Function called "fetch_card_attachments" that uses The API to fetch The Fetched Attachments for a given card using the endpoint "/cards/{id}/attachments".
  - the "card ID" should be provided in the "payload" dictionary.

  ***Acceptance Tests:***

  - Test The Function "fetch_card_attachments" with Card ID "688725fdf26b3c50430cae23". Expect the number of The Fetched Attachments to be 1. The value of field "name" of The Fetched Attachments should be "Result from test.com".


## Generate 'initial_domain_mapping.json' and 'external_domain_metadata.json'

### Generate 'external_domain_metadata.json'

{% include "templates/external_domain_metadata_boilerplate.plain" %}

***Functional Requirements:***

- Implement The Function 'get_external_domain_metadata' that generates and returns The External Domain Metadata JSON object. The External Domain Metadata JSON object should have the record type 'users'.
{% include "mappings/external_domain_metadata_users.plain" %}

- The External Domain Metadata JSON object should include the record type 'cards', while preserving any existing record types.
{% include "mappings/external_domain_metadata_cards.plain" %}

### Generate 'initial_domain_mapping.json'

{% include "templates/initial_domain_mapping_boilerplate.plain" %}

***Functional Requirements:***

- Implement The Function that generates and returns The Initial Domain Mapping JSON object. The Initial Domain Mapping JSON object should have record_type_mappings "users".
{% include "mappings/initial_domain_mapping_users.plain" %}

- The Initial Domain Mapping JSON object should have record_type_mappings "cards", while preserving any existing mappings.
{% include "mappings/initial_domain_mapping_cards.plain" %}

## Pushing data to DevRev servers

***Definitions:***

- Resource [data-extraction.md](docs/data-extraction.md) should serve as a generic guide for the implementation of The Extraction Function.

- Field "dateLastActivity" in The Fetched Cards is of format ISO 8601 Extended Format with timezone.

- If filtering by "dateLastActivity", the filter should be done client-side. The API doesn't support filtering by "dateLastActivity".

***Non-Functional Requirements:***

- The resource [trello-openapi-compact.yaml](trello-openapi-compact.yaml) describes The API. The Normalization Function should take the relevant record type from The External Domain Metadata JSON object and map all resources from The API to the corresponding record type in The Normalization Function.

- The Extraction State Object is a state passed to The Worker Thread. We should use the following structure for The Extraction State Object:
  - "users":
    - "completed" (boolean, required, indicating if the users data has been pushed to the DevRev servers)
  - "cards":
    - "completed" (boolean, required, indicating if the cards data has been fully pushed to the DevRev servers)
    - "before" (string, optional, indicating the ID of the what's the next "before" parameter to use when fetching the next page of The Fetched Cards)
    - "modifiedSince" (string, optional, timestamp used for incremental data synchronization to fetch only the cards that have been updated since the last sync)
  - "attachments": 
    - "completed" (boolean, required, indicating if the attachments data has been pushed to the DevRev servers)

{% include "templates/spawn_method_instructions.plain",  %}

- The Trello Internal Client should be used to retrieve The Fetched Boards, The Fetched Users, The Fetched Cards and all other data from The API.

- The Fetched Users and The Fetched Cards *must not* be mocked and must be retrieved from The API.

- The Extraction Function should not stringify error messages. If an error is thrown, it should be logged before throwing it.

- When listing The Fetched Cards, you should always set the parameter "limit" to 100 (The Pagination Limit) when calling The API.

- The Fetched Cards should be retrieved in full with pagination (with "limit" and "before" parameters). This includes making multiple requests to The API.
  - Initial request: limit=The Pagination Limit, propagate the "before" parameter from The Extraction State Object only if it exists.
  - If response < The Pagination Limit cards: complete
  - If response = The Pagination Limit cards: make next request with limit=The Pagination Limit, before=first_card_id, where "first_card_id" is field "id" of the first card in the response.
  - Repeat previous step until response < The Pagination Limit cards

- To retrieve "created_date" from The API and convert it in The Normalization Function, keep in mind that the first 8 characters represent a Unix timestamp in hexadecimal format. To retrieve the "created_date" from The API:
  - Take the first 8 characters of the ID
  - convert to decimal
  - convert to ISO 8601 Extended Format with timezone.

***Functional Requirements:***

- Implement The Extraction Function that:
  - Retrieves The Fetched Boards
  - Pushes The Fetched Boards as external sync units if "event_type" equals "EXTRACTION_EXTERNAL_SYNC_UNITS_START"
  - The following mapping from the fields in The Fetched Boards to the fields in The External Sync Units should be used:
    - "id" from The Fetched Boards should be mapped to "id" in The External Sync Units
    - "name" from The Fetched Boards should be mapped to "name" in The External Sync Units
    - "desc" from The Fetched Boards should be mapped to "description" in The External Sync Units
    - "item_type" should have a fixed value of "tasks"

  ***Acceptance Tests:***
  
  - Test The Extraction Function using the resource [trello_external_sync_unit_check.json](test_data/trello_external_sync_unit_check.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. For the test to be successful The Callback Server **must** receive from DevRev **exactly one** event with "event_type" that equals "EXTRACTION_EXTERNAL_SYNC_UNITS_DONE". The test must not send the event directly to The Callback Server.

- If "event_type" equals "EXTRACTION_EXTERNAL_SYNC_UNITS_START" The Extraction Function should:
  - For each board from The Fetched Boards, retrieve the number of The Fetched Cards.
  - Set the value of The External Sync Unit Item Count of each board to the number of The Fetched Cards.

  ***Acceptance Tests:***

  - Test The Extraction Function using the resource [external_sync_unit_counts.json](test_data/external_sync_unit_start.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. For the test to be successful, the callback server **must** receive from DevRev an event with "event_type" that equals "EXTRACTION_EXTERNAL_SYNC_UNITS_DONE". The event_data should contain an "external_sync_units" array where one of the external sync units has "id" equal to The Board ID of "688725dad59c015ce052eecf" and "item_count" equal to 150. The test must not send the event directly to The Callback Server. 

- If "event_type" equals "EXTRACTION_METADATA_START" The Extraction Function should implement the "metadata extraction" part of the extraction workflow by pushing The External Domain Metadata JSON object to the repository called 'external_domain_metadata'. Please note that The External Domain Metadata JSON object shouldn't be normalized when pushed to the repository.

- If "event_type" equals "EXTRACTION_DATA_START" or "event_type" equals "EXTRACTION_DATA_CONTINUE" The Extraction Function should push the 'users' data. To push the 'users' data, it should:
  - If The Extraction State Object indicates that the users data has been fully pushed to the DevRev servers, skip the 'users' data extraction.
  - Retrieve The Fetched Users
  - Push The Fetched Users to the repository designated for 'users' data.
  - Update The Extraction State Object to indicate that the users data has been fully pushed to the DevRev servers
  - Refer to the resource [data-extraction-rules-from-emitting-events.md](docs/data-extraction-rules-from-emitting-events.md) for the rules for emitting events from the snap-in.

  ***Acceptance Tests:***
  
  - Test The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Test is successful if The Callback Server receives from DevRev a **single** event with "event_type" that equals "EXTRACTION_DATA_DONE". The test must not send event directly to The Callback Server.

  - Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the "users" record type:
    - Firstly, invoke The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID.
{% include "templates/chef_cli_normalization_validation.plain", record_type: "users" %}

- If "event_type" equals "EXTRACTION_DATA_START" or "event_type" equals "EXTRACTION_DATA_CONTINUE" The Extraction Function should push the 'cards' and 'users' data. To push the 'cards' data, it should:
  - If The Extraction State Object indicates that the cards data has been fully pushed to the DevRev servers, skip the 'cards' data extraction (Note: If The Extraction State Object indicates that the 'users' data has been fully pushed to the DevRev servers, but the 'cards' data has not, you should still do the extraction of the 'cards' data. Vice versa also applies).
  - Fetch The Fetched Cards using pagination. If there's a "before" parameter in The Extraction State Object, use it to resume pagination from that point. Otherwise, start from the first page.
  - After every call to The API for fetching The Fetched Cards:
    - Update "before" parameter in The Extraction State Object to the ID of the first card in the current page of The Fetched Cards
    - Push The Fetched Cards from the current page to the repository designated for 'cards' data.
  - Extraction of The Fetch Cards is successful only after all pages have been processed. After success, update The Extraction State Object to indicate that the cards data has been fully pushed to the DevRev servers.
  - Refer to the resource [data-extraction-rules-from-emitting-events.md](docs/data-extraction-rules-from-emitting-events.md) for the rules for emitting events from the snap-in.

  ***Acceptance Tests:***

  - Test The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Test is successful if The Callback Server receives from DevRev a **single** event with "event_type" that equals "EXTRACTION_DATA_DONE". The test must not send event directly to The Callback Server.

  - Test The Extraction Function using the resource [data_extraction_continue_test.json](test_data/data_extraction_continue_test.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Test is successful if The Callback Server receives from DevRev a **single** event with "event_type" that equals "EXTRACTION_DATA_DONE". The test must not send event directly to The Callback Server. The event_data should contain an "artifacts" array where one of the artifacts has "item_type" equal to "cards" and "item_count" equal to 150.

  - Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the "cards" record type:
    - Firstly, invoke The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID.
{% include "templates/chef_cli_normalization_validation.plain", record_type: "cards" %}

- If "event_type" equals "EXTRACTION_ATTACHMENTS_START" or "EXTRACTION_ATTACHMENTS_CONTINUE" The Extraction Function should implement attachment extraction as described in the resource [attachments-extraction.md](docs/attachments-extraction.md).

- If "event_type" equals "EXTRACTION_DATA_START", The Extraction Function should support incremental data synchronization as described in the resource [incremental_mode.md](docs/incremental_mode.md).
  - Incremental mode should only work for the "cards" data.
  - If we're in incremental mode, set The Extraction State Object to indicate that the cards data has not been fully pushed to the DevRev servers.
  - Only the cards that have been updated after (this is seen as the value of "dateLastActivity") the time of the last successful sync should be once again pushed to the DevRev servers.
  - Note: In incremental mode, you should filter the cards and push only the filtered cards to the DevRev servers.
  - Refer to the resource [data-extraction-rules-from-emitting-events.md](docs/data-extraction-rules-from-emitting-events.md) for the rules for emitting events from the snap-in.

  ***Acceptance Tests:***

  - Validate the incremental mode with the following flow:
    - Firstly, invoke The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json). Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Expect The Callback Server to receive from DevRev a **single** event with "event_type" that equals "EXTRACTION_DATA_DONE".
    - Then, perform request directly to The API to update the card with id "688725fd3e26ebcf364bff4a". More specifically, you should update name of this card to "Card50-{uuid}" using request `curl --request PUT --url 'https://api.trello.com/1/cards/688725fd3e26ebcf364bff4a?key=<TRELLO_API_KEY>&token=<TRELLO_TOKEN>&name="Card50-<uuid>"' --header 'Accept: application/json'` (replace <TRELLO_API_KEY>, <TRELLO_TOKEN> and <uuid> with the actual values).
    - Then, invoke The Extraction Function using the same resource [data_extraction_test.json](test_data/data_extraction_test.json), but with payload.event_context.mode set to "INCREMENTAL". Expect The Callback Server to receive from DevRev a **single** event with "event_type" that equals "EXTRACTION_DATA_DONE". The "event_data" should contain an array "artifacts" where one of the elements has "item_type" equal to "cards" and "item_count" equal to 1, indicating only one card has been synced.